repeat task.wait() until game:IsLoaded(); 
local MyLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/xnazov/main/main/lib"))()
local Players = game:GetService("Players"); local Player = Players.LocalPlayer; local Hum = Player.Character.HumanoidRootPart
local Things = game:GetService("Workspace").__THINGS; local Active = Things.__INSTANCE_CONTAINER.Active; local Instances = Things.Instances
local RepStor = game:GetService("ReplicatedStorage"); local Network = RepStor:WaitForChild("Network"); local Http = game:GetService("HttpService") 
local saveMod = require(RepStor.Library.Client.Save); local saveFile = saveMod.Get(Player); local GameLibrary = require(RepStor:WaitForChild("Library"))
local Inventory = saveFile.Inventory; local Currency = Inventory.Currency; Misc = Inventory.Misc; local Pets = Inventory.Pet
local diamonds = "💎 Diamonds"; local startDiamonds = Player.leaderstats[diamonds].Value; local gemCount = 0
local presentFolder = Things.HiddenPresents; local presentRemote = Network:WaitForChild("Hidden Presents: Found")
-- Get info
function getSection(Text) for i,v in pairs(game:GetService("CoreGui"):GetDescendants()) do if (v:IsA("TextButton") or v:IsA("TextLabel")) and v.Text == Text then return v end end end
function getRod() return Player.Character and Player.Character:FindFirstChild("Rod", true) end
function getLine() return Player.Character and Player.Character:FindFirstChild("FishingLine", true) end
function getBobba() return Player.Character and Player.Character:FindFirstChild("Bobber", true) end

local Statistics = MyLibrary:CreateWindow("Stats 💸")
Statistics:Button("press for sadness", function()
	if saveFile.RobuxSpent > 1000 then
		GameLibrary.Alert.Message("lmao you've spent "..saveFile.RobuxSpent.." robux on this shit game!") 
	elseif saveFile.RobuxSpent > 0 and saveFile.RobuxSpent < 1000 then
		GameLibrary.Alert.Message("congrats you've only spent "..saveFile.RobuxSpent.." robux on this shit game!") 
	elseif saveFile.RobuxSpent == 0 then
		GameLibrary.Alert.Message("holy! you've spent 0 robux on this shit game! (atleast on this account lol) :p")
	end	
end)

local Fishing = MyLibrary:CreateWindow("Fishing 🐟"); --local selectMerchants = {"All Unlocked", "Merchant", "Advanced Merchant", "Garden Merchant", "Dealer Merchant"}
Fishing:Dropdown("select area", {flag = 'areatoautoFish', search = false, default = getgenv().config.placetoFish, list = areasToFish})
Fishing:Toggle("auto fish area", {flag = 'autoFish', default = getgenv().config.autoFishing}, function()
	while Fishing.flags.autoFish do
		local fishStart = os.time()
		repeat task.wait()
			if isGettingPresents then repeat task.wait() until not isGettingPresents end
			if Fishing.flags.areatoautoFish == "Fishing" then
				if Active:FindFirstChild("Fishing") == nil then
					if Active:FindFirstChild("AdvancedFishing") then
						LeaveArea()
					else
						local tptimeout = 3
						Hum.CFrame = Instances[Fishing.flags.areatoautoFish].Teleports.Enter.CFrame
						local tptimeoutstartTime = tick()
						repeat task.wait(0.1)
							repeat task.wait() until Active:WaitForChild("Fishing") or (tick() - tptimeoutstartTime > tptimeout)
							Hum.CFrame = CFrame.new(teleport + Vector3.new(1114.163, 86.859, -3432.788))
						until tick() - tptimeoutstartTime > tptimeout
					end
				end
				repeat task.wait() until Active:WaitForChild("Fishing")
				task.wait(0.5)
				if getLine() == nil then
					--print("casting line")
					Network.Instancing_FireCustomFromClient:FireServer("Fishing", "RequestCast", Vector3.new(1171.576 + math.random(-65, 65), 75.914, -3452.577 + math.random(-65, 65)))
					task.wait(2.5)
					--print("searching for line")
				else
					--print("line already exists")
				end
				local foundline = false
				local linetimeout = 3
				local linetimer = tick()
				repeat task.wait()
					if tick() - linetimer > linetimeout then warn("line timeout reached") 
						Network.Instancing_FireCustomFromClient:FireServer("Fishing", "RequestCast", Vector3.new(1171.576 + math.random(-65, 65), 75.914, -3452.577 + math.random(-65, 65)))
						task.wait(2.5)
					end
				until getLine() ~= nil
				--print("found line")
				task.wait(.5)
				local reeled = false
				local bobtimeout = 3
				local bobtimer = tick()
				local startPos = getBobba().CFrame.Y
				repeat task.wait() 
					local currentbob = game.Players.LocalPlayer.Character:FindFirstChild("Bobber", true).CFrame.Y
					if currentbob < startPos then
						--print("found bob")
						if getLine() ~= nil then
							--print("start reeling")
							Network.Instancing_FireCustomFromClient:FireServer("Fishing", "RequestReel")
							reeled = true
						end
					end
					if tick() - bobtimer > bobtimeout then
						warn("bob timeout reached")
						startPos = currentbob
						task.wait(0.5)
					end
				until reeled == true
				while getRod().Parent.Bobber.Transparency > 0 do 
					if getLine() ~= nil then
						Network.Instancing_InvokeCustomFromClient:InvokeServer("Fishing", "Clicked") 
					end
					task.wait(0.01) 
				end
				fishingcounter = fishingcounter + 1
				--print("successfully fished: x"..fishingcounter.." times..")
				if getgenv().config.autoPresents == true then
					local fishElapsed = os.time() - fishStart
					if fishElapsed >= 305 then
						warn("going to get presents")
						getPresents()
						fishStart = os.time()
					end
				end
			elseif Fishing.flags.areatoautoFish == "AdvancedFishing" then
				if Active:FindFirstChild("AdvancedFishing") == nil then
					if Active:FindFirstChild("Fishing") then
						LeaveArea()
					else
						local tptimeout = 3
						Hum.CFrame = Instances[Fishing.flags.areatoautoFish].Teleports.Enter.CFrame
						local tptimeoutstartTime = tick()
						repeat task.wait(0.1)
							repeat task.wait() until Active:WaitForChild("AdvancedFishing") or (tick() - tptimeoutstartTime > tptimeout)
							Hum.CFrame = CFrame.new(teleport + Vector3.new(1450.375, 70.175, -4469.783))
						until tick() - tptimeoutstartTime > tptimeout
					end
				end
				repeat task.wait() until Active:WaitForChild("AdvancedFishing")
				task.wait(0.5)
				if getLine() == nil then
					--print("casting line")
					Network.Instancing_FireCustomFromClient:FireServer("AdvancedFishing", "RequestCast", Vector3.new(1487.791 + math.random(-65, 65), 61.355, -4454.075 + math.random(-65, 65)))
					task.wait(2.5)
					--print("searching for line")
				else
					--print("line already exists")
				end
				local foundline = false
				local linetimeout = 3
				local linetimer = tick()
				repeat task.wait()
					if tick() - linetimer > linetimeout then warn("line timeout reached") 
						Network.Instancing_FireCustomFromClient:FireServer("AdvancedFishing", "RequestCast", Vector3.new(1487.791 + math.random(-65, 65), 61.355, -4454.075 + math.random(-65, 65)))
						task.wait(2.5)
					end
				until getLine() ~= nil
				--print("found line")
				task.wait(.5)
				local reeled = false
				local bobtimeout = 3
				local bobtimer = tick()
				local startPos = getBobba().CFrame.Y
				repeat task.wait() 
					local currentbob = game.Players.LocalPlayer.Character:FindFirstChild("Bobber", true).CFrame.Y
					if currentbob < startPos then
						--print("found bob")
						if getLine() ~= nil then
							--print("start reeling")
							Network.Instancing_FireCustomFromClient:FireServer("AdvancedFishing", "RequestReel")
							reeled = true
						end
					end
					if tick() - bobtimer > bobtimeout then
						--warn("bob timeout reached")
						startPos = currentbob
						task.wait(0.5)
					end
				until reeled == true
				while getRod().Parent.Bobber.Transparency > 0 do 
					if getLine() ~= nil then
						Network.Instancing_InvokeCustomFromClient:InvokeServer("AdvancedFishing", "Clicked") 
					end
					task.wait(0.01) 
				end
				fishingcounter = fishingcounter + 1
				--print("successfully fished: x"..fishingcounter.." times..")
				if getgenv().config.autoPresents == true then
					local fishElapsed = os.time() - fishStart
					if fishElapsed >= 305 then
						--warn("going to get presents")
						getPresents()
						fishStart = os.time()
					end
				end
			end
		until not Fishing.flags.autoFish
	end
end)
